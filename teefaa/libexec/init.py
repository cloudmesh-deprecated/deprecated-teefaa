#!/usr/bin/env python

import os
import time

from fabric.api import (
        env,
        lcd,
        local,
        task
        )
from fabric.contrib.files import append

from cuisine import (
        dir_ensure,
        file_append,
        file_exists,
        file_write,
        mode_sudo,
        text_strip_margin
        )

from .common import read_config, do_sudo

class Init(object):

    def __init__(self, args):

        self.ip_address = args.ip_address
        self.hostname = args.hostname
        self.dot_teefaa_dir = ".teefaa"
        self.ssh_key = self.dot_teefaa_dir + "/ssh_key"
        self.ssh_config = self.dot_teefaa_dir + "/ssh_config"
        self.vagrantfile = self.dot_teefaa_dir + "/Vagrantfile"

    def _create_key_pair(self):

        if not os.path.isdir(self.dot_teefaa_dir):

            cmd = ['mkdir', self.dot_teefaa_dir]
            local(' '.join(cmd))

        if not os.path.isfile(self.ssh_key):

            cmd = ['ssh-keygen', '-f', self.ssh_key, '-C', 
                    '\"generated by Teefaa [$(date)]\"',
                    '-N', '\'\'']
            local(' '.join(cmd))

    def _create_vagrantfile(self):

        if not os.path.isfile(self.vagrantfile):
        
            text = text_strip_margin("""
            |Vagrant::Config.run do |config|
            |  config.vm.box = 'tf-ubuntu-12.04'
            |  config.vm.box_url = 'http://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box'
            |end
            |""")
            with open(self.vagrantfile, 'w') as f:
                f.write(text)

    def _vagrant_up(self):

        with lcd(self.dot_teefaa_dir):
            cmd = ['vagrant', 'status', '|', 'grep', 'default']
            output = local(' '.join(cmd), capture=True)
            if not "running" in output:
                print("booting vagrant box...")
                local("vagrant up")
            else:
                print("vagrant box is running...")

    def _ssh_config_for_vbox(self):

        with lcd(self.dot_teefaa_dir):
            cmd = ['vagrant', 'ssh-config', 'default']
            output = local(' '.join(cmd), capture=True)
        with open(self.ssh_config, 'w') as f:
            start = False
            for line in output.split('\n'):
                if line.startswith("Host") or start:
                    start = True
                    f.write(line + '\n')

    def _create_host_dir(self):

        if not os.path.isdir(self.hostname):

            cmd = ['mkdir', self.hostname]
            local(' '.join(cmd))

    def _create_teefaafile(self):

        dot_teefaa = os.path.abspath(self.dot_teefaa_dir)
        text = text_strip_margin("""
        |ssh_config: {d}/ssh_config
        |ssh_key: {d}/ssh_key
        |
        |iso_config:
        |  base_iso: debian-live-7.2-amd64-standard.iso
        |  base_iso_url: http://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/debian-live-7.2-amd64-standard.iso
        |  builder:
        |    hostname: default
        |    distro: ubuntu
        |  iso_path: {d}/teefaa-debian-live.iso
        |""".format(d=dot_teefaa))
        teefaafile = self.hostname + "/Teefaafile.yml"
        with open(teefaafile, 'w') as f:
            f.write(text)

    def _create_teefaa_iso(self):
        
        with lcd(self.hostname):
            local("teefaa make-installer")

    def _vagrant_destroy(self):
        
        with lcd(self.dot_teefaa_dir):
            cmd = ['vagrant', 'status', '|', 'grep', 'default']
            output = local(' '.join(cmd), capture=True)
            if "running" in output:
                print("destroying vagrant box...")
                local("vagrant destroy --force")
            else:
                print("vagrant box is not running...")

    def _create_ssh_config(self):

        ssh_key = os.path.abspath(self.ssh_key)
        text = text_strip_margin("""
        |UserKnownHostsFile /dev/null
        |StrictHostKeyChecking no
        |IdentityFile {f}
        |PasswordAuthentication no
        |IdentitiesOnly yes
        |LogLevel FATAL
        |""".format(f=ssh_key))
        with open(self.ssh_config, 'w') as f:
            f.write(text)
 
    def run(self):

        self._create_key_pair()
        self._create_vagrantfile()
        self._vagrant_up()
        self._ssh_config_for_vbox()
        self._create_host_dir()
        self._create_teefaafile()
        self._create_teefaa_iso()
        self._vagrant_destroy()
        self._create_ssh_config()


@task
def init(args):

    ti = Init(args)
    ti.run()
